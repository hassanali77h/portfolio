# -*- coding: utf-8 -*-
"""investigate-a-dataset-template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gMk7czRCG00ePHUQSVDf_IqcfC_Dxrj2

# Project: Investigate a Dataset (No Show Appointments Analysis)

## Table of Contents
<ul>
<li><a href="#intro">Introduction</a></li>
<li><a href="#wrangling">Data Wrangling</a></li>
<li><a href="#eda">Exploratory Data Analysis</a></li>
<li><a href="#conclusions">Conclusions</a></li>
</ul>
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""<a id='wrangling'></a>
## Data Wrangling

> **Tip**: In this section of the report, you will load in the data, check for cleanliness, and then trim and clean your dataset for analysis. Make sure that you document your steps carefully and justify your cleaning decisions.

### General Properties
"""

from google.colab import files


uploaded = files.upload()

df = pd.read_csv('noshowappointments-kagglev2-may-2016.csv')
df.head()

df.tail()

df.shape

"""# **Data Info.**"""

df.duplicated().sum()

df['PatientId'].nunique()

df['PatientId'].duplicated().sum()

#chech the number of Ids and Noshow
df.duplicated(['PatientId','No-show']).sum()

"""There are 38710 patient ids have the same status."""

#inspection of data
df.info()

df.describe()

"""mean age = 37
max age = 115
min age = -1 which is a mistake , will be removed.
"""

#identify rows of -1 value
mask = df.query('Age=="-1"')
mask

"""# **Data Cleaning**"""

#removing -1 value 
df.drop(index=99832,inplace=True)

df.describe()

#correction of columns names
df.rename(columns={'Hipertension':'Hypertension'},inplace=True)
df.rename(columns={'No-show':'No_show'},inplace=True)
df.head()

#removing duplicated Ids with duplicatad status
df.drop_duplicates(['PatientId','No_show'],inplace=True)
df.shape

#remove unnecessary data
df.drop(['PatientId','AppointmentID','ScheduledDay','AppointmentDay'],axis=1,inplace=True)
df.head()

"""<a id='eda'></a>
## Exploratory Data Analysis


"""

# Use this, and more code cells, to explore your data. Don't forget to add
#   Markdown cells to document your observations and findings.
df.hist(figsize=(16,6.5));

#patients showing or no showing
show=df.No_show==0
noshow=df.No_show==1
df[show].count(), df[noshow].count()

df[show].mean(),df[noshow].mean()

"""factors on attendance rate"""

#show pie.chart
sorted_counts = df.No_show.value_counts()
plt.pie(sorted_counts, labels = ['show', 'noshow'], startangle = 90,
        counterclock = False, autopct='%1.1f%%');
plt.axis('square')
plt.title('Paitents Show Status');

"""75.4 showed up for their appointments."""

#Gender plot
sns.countplot(data = df, x = 'Gender', color = 'blue')
plt.title('Paitents Gender')
plt.xticks([0, 1], ['Female', 'Male'])
plt.xlabel('Gender')
plt.ylabel('Number of Patients');

""" most patients were females"""

#Age hist.
bin_edges = np.arange(0, df['Age'].max()+5, 5)
plt.hist(data = df, x = 'Age', bins = bin_edges)
plt.xlabel('Age')
plt.title('Distribution of Patients Age');

"""most of the patients were young"""

#Scholarship plot.
sns.countplot(data = df, x = 'Scholarship', color = 'blue')
plt.title('Paitents Scholarship Status')
plt.xticks([0, 1], ['No Scholarship', 'Scholarship'])
plt.xlabel('Status')
plt.ylabel('Number of Patients');

"""most of the patients have no scholarship"""

#alcoholism, diabetes, handcap, and hipertension plots.
plt.figure(figsize = [14, 10]) 

# alcoholism plot
plt.subplot(2, 2, 1) # 2 rows, 2 cols, subplot 1
sns.countplot(data = df, x = 'Alcoholism', color = 'blue')
plt.title('Paitents Alcoholism Status')
plt.xticks([0, 1], ['Not an Alcoholic', 'Alcoholic'])
plt.xlabel('')
plt.ylabel('Number of Patients');

# diabetes plot
plt.subplot(2, 2, 2) # 2 row, 2 cols, subplot 2
sns.countplot(data = df, x = 'Diabetes', color = 'blue')
plt.title('Paitents Diabetes Status')
plt.xticks([0, 1], ['Not Diabetic', 'Diabetic'])
plt.xlabel('')
plt.ylabel('');

# hypertension plot
plt.subplot(2, 2, 3) # 2 rows, 2 cols, subplot 3
sns.countplot(data = df, x = 'Hypertension', color ='blue')
plt.title('Paitents Hypertension Status')
plt.xticks([0, 1], ['Not Hypertensive', 'Hypertensive'])
plt.xlabel('Status')
plt.ylabel('Number of Patients');
# handcap plot
plt.subplot(2, 2, 4) # 2 row, 2 cols, subplot 4
sns.countplot(data = df, x = 'Handcap', color ='blue')
plt.title('Paitents Handicap Status')
plt.xticks([0, 1], ['Not Handicapped', 'Handicapped'])
plt.xlabel('Status')
plt.ylabel('');

#Highest five neighbourhoods in terms of the number of no-show appointments?
# no show appointments
df_No_show = df[df.No_show == 1]

# horizontal bar chart
plt.figure(figsize = [8, 4])
cat_order = df_No_show['Neighbourhood'].value_counts().index[:5]
sns.countplot(data = df_No_show, y = 'Neighbourhood', color ='blue', order = cat_order)
plt.title('Highest 5 Neighbourhoods in Terms of The Number of No Show Appointments')
plt.xlabel('Number of No Show Appointments')
plt.ylabel('Neighbourhood');

"""JARDIM CAMBURI neighbourhood had the heighest number of missed appointments followed by MARIA ORTIZ."""

#gender be considered as a factor to show up 
# percentages of no show patients based on gender
no_show_perc_gender = df.groupby('Gender').No_show.mean() * 100

# plot a bar chart
plt.bar(x = no_show_perc_gender.index, height = no_show_perc_gender)
plt.title('The Percentages of No Show Patients Based on Gender')
plt.xticks([0, 1], ['Female', 'Male'])
plt.ylabel('No Show Percentage');

"""Values are so close, so it's not considered as a factor."""

#age be considered as a factor to  show up 
# percentages of no show patients based on age group
no_show_perc_age = df.groupby('Age').No_show.mean() * 100

# plot a bar chart
plt.figure(figsize = [8, 4])
plt.bar(x = no_show_perc_age.index, height = no_show_perc_age)
plt.title('The Percentages of No Show Patients Based on Age Group')
plt.xlabel('Age Group')
plt.ylabel('No Show Percentage');

"""The age (19-37) missed their appointments more than the other groups. the age group (55 and above) were the most showing up for their appointments."""

#scholarship be considered as a factor to show up 
# percentages of no show patients based on scholarship
no_show_perc_scholarship = df.groupby('Scholarship').No_show.mean() * 100

# plot a bar chart
plt.bar(x = no_show_perc_scholarship.index, height = no_show_perc_scholarship)
plt.title('The Percentages of No Show Patients Based on Scholarship')
plt.xticks([0, 1], ['No Scholarship', 'Scholarship'])
plt.ylabel('No Show Percentage');

"""\>25% of patients with scholarship didn't show up for their appointments, while about 20% of patients without scholarship missed their appointments"""



"""<a id='conclusions'></a>
## Conclusions

> The dataset contained 110,527 appointments.

*Most patients:*

Were females.
Were young.
Didn't have a scholarship.

Following questions were answered.
1-Highest five neighbourhoods in terms of the number of no-show appointments?

2- is gender is a factor of attendance?

3-is age is a factor of attendance?

4-is Scholarships is a factor of attendance?
"""

